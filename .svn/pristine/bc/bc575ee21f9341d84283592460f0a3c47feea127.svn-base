package com.sg.web.controller;

import com.sg.model.ArticleEntity;
import com.sg.model.BlogInfoEntity;
import com.sg.service.ArticleService;
import com.sg.service.BlogInfoService;
import com.sg.web.util.ControllerUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by sg on 2016/7/26.
 */
@Controller
@RequestMapping(value="/admin")
public class AdminController {

    @Autowired
    private ArticleService articleService;

    @Autowired
    private BlogInfoService blogInfoService;

    @RequestMapping( method = RequestMethod.GET)
    public String admin(ServletRequest request, ServletResponse response) {
        return "admin";
    }

    @RequestMapping(value="/postArticle",method = RequestMethod.GET)
    public String postArticle(@RequestParam(value="id",defaultValue = "0")Long id,ServletRequest request,ServletResponse response){
        ArticleEntity articleEntity = null;
        if(id != null ){
            if(this.articleService.getArticleById(id) != null){
                articleEntity = this.articleService.getArticleById(id);
            }
        }
        if(articleEntity == null){
            articleEntity = new ArticleEntity();
        }
        request.setAttribute("article",articleEntity);
        return "blog/postArticle";
    }

    @RequestMapping(value="/articleSave",method = RequestMethod.POST)
    public String saveArticle(ServletRequest request, ServletResponse response, ArticleEntity article, PrintWriter printWriter){
        this.articleService.saveArticle(article);
        return "blog/managerArticle";
    }
    @RequestMapping(value="/managerArticle",method = RequestMethod.GET)
    public String managerArticle(ServletRequest request, ServletResponse response){
        return "blog/managerArticle";
    }

    @RequestMapping(value="/fileupload" ,method = RequestMethod.GET)
    public String fileupload(ServletRequest request, ServletResponse response){
        return "fileupload";
    }

    @RequestMapping(value = "/articleList",method = RequestMethod.GET)
    @ResponseBody
    public void articleList(@RequestParam(value = "page", defaultValue = "1") int pageNumber,
                            @RequestParam(value = "limit", defaultValue = "10") int pageSize,
                            @RequestParam(value = "sortName", defaultValue = "id") String sortName,
                            @RequestParam(value = "sortType", defaultValue = "desc") String sortType,ServletRequest request, ServletResponse response,PrintWriter printWriter){
        HashMap<String,Object> result = new HashMap<String, Object>();
        Map<String,String> params = new HashMap<String, String>();
        params.put("title","");
        Page<ArticleEntity> pageArticles = this.articleService.getPageArticleByParams(pageNumber,pageSize,sortName,sortType,params);


        List<ArticleEntity> articles = this.articleService.getAllArticle();
        Long count = this.articleService.getAllArticleCount();
        ControllerUtil.printGrid(printWriter,pageArticles.getTotalElements(),pageArticles.getContent());
//        result.put("totalCount",pageArticles.getTotalElements());
//        result.put("items",pageArticles.getContent());
//        return result;
    }

    @RequestMapping(value="/articleDelete")
    @ResponseBody
    public HashMap<String,Object> articleDelete(@RequestParam(value="id")Long id){
        HashMap<String,Object> result = new HashMap<String, Object>();
        if(id != null){
            this.articleService.deleteArticleById(id);
        }
        result = ControllerUtil.createReturnObject(true,"删除成功",null);
        return result;
    }

    @RequestMapping(value="/blogInfoManage")
    public String blogInfoManage(ServletRequest request,ServletResponse response){
        return "blog/blogInfoManage";
    }

    @RequestMapping(value="/blogInfoSave",method = RequestMethod.POST)
    @ResponseBody
    public HashMap<String,Object> blogInfoSave(BlogInfoEntity blogInfo, ServletRequest servletRequest, ServletResponse servletResponse){
        HashMap<String,Object>result = new HashMap<String, Object>();
        if(blogInfo != null){
            this.blogInfoService.saveBlogInfo(blogInfo);
        }
        result = ControllerUtil.createReturnObject(true,"添加成功","");
        return result;
    }

    @RequestMapping(value = "/qiniu",method = RequestMethod.GET)
    public String qiniu(ServletRequest request, ServletResponse response){
        return "qiniu/qiniu";
    }
}
